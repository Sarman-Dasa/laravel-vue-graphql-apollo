"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
  
    post(id: ID!): Post @field(resolver: "App\\GraphQL\\Mutations\\PostData@resolve")

    posts(
      title: String @where(operator: "like")
    ): [Post!]! @paginate(defaultCount: 10) @orderBy(column: "created_at", direction: "desc")

   me: User @auth
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
    postsList: [Post!]! @hasMany(relation: "posts") @orderBy(column: "created_at", direction: "desc")
}

type Post {
    id: ID!
    title: String!
    body: String!
    created_at: DateTime
    updated_at: DateTime
    "The user who created the post."
    user: User @belongsTo(relation: "user") # The post belongs to a user
    "List of comments associated with the post."
    commentsList: [Comment!]! @hasMany(relation: "comments") @orderBy(column: "created_at", direction: "desc")
    commentCount: Int! @count(relation: "comments")
}


type Comment {
    id: ID!
    comment: String!
    created_at: DateTime
    updated_at: DateTime
    "The post this comment belongs to."
    posts: Post @belongsTo(relation: "post")
    "The user who made the comment."
    user: User @belongsTo(relation: "user")
    likeCount: Int! @count(relation: "likes")
    hasLiked: Boolean! @field(resolver: "App\\GraphQL\\Mutations\\CommentLikeStatus")
    parent: Comment @belongsTo(relation: "parent")
    children: [Comment!]! @hasMany(relation: "children")
    parent_id: ID
}



type Mutation {
  createUser(input: createNewuser @spread): User @create
  updateUser(id: ID!, input: updateUser @spread): User @update
  deleteUser(id: ID!): User @field(resolver: "App\\GraphQL\\Mutations\\DeleteUserMutation")
  createPost(input: CreatePostInput @spread):Post @create(model: "App\\Models\\Post")
  updatePost(id:ID!, input: UpdatePostInput @spread):Post @update(model: "App\\Models\\Post")
  deletePost(id: ID!): Post @field(resolver: "App\\GraphQL\\Mutations\\DeleteuserPostMutation")
  likeComment(comment_id: ID!): Comment @field(resolver: "App\\GraphQL\\Mutations\\LikeCommentMutation")
  createPostComment(input:CreateCommentInput @spread) :Comment @create
  deleteComment(id:ID! @eq): Comment @delete
  updateComment(id: ID!,comment:String!): Comment @field(resolver: "App\\GraphQL\\Mutations\\UpdateComment")
}

input createNewuser {
  name: String!
  email: String! @rules(apply:["email", "unique:users,email"])
  password: String! @rules(apply:["min:5"])
}

input updateUser {
  name: String!
  password: String! @rules(apply:["min:5"])
}

input CreatePostInput {
  title: String! @rules(apply: ["required"])
  body: String! @rules(apply: ["required"])
  user_id: ID! @rules(apply: ["exists:users,id"])
}

input UpdatePostInput {
  title: String! @rules(apply: ["required"])
  body: String! @rules(apply: ["required"])
}

input CreateCommentInput {
  user_id: ID! @rules(apply: ["exists:users,id"])
  post_id: ID! @rules(apply: ["exists:posts,id"])
  comment: String! @rules(apply: ["required"])
  parent_id: ID @rules(apply:["nullable","exists:comments,id"])
}